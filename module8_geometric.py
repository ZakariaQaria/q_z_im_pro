import streamlit as st
import cv2
import numpy as np
from helpers import load_image, add_user_progress

def show_module8():
    """ุนุฑุถ ุงููุญุงุถุฑุฉ ุงูุซุงููุฉ: ุงูุชุญูููุงุช ุงูููุฏุณูุฉ"""
    
    st.header("๐ ุงููุญุงุถุฑุฉ 8: ุงูุชุญูููุงุช ุงูููุฏุณูุฉ (Geometric Transforms)")
    
    # ูุนูููุงุช ุงูุชูุฏู
    if st.session_state.progress.get("module8", False):
        st.success("โ ููุฏ ุฃูููุช ูุฐู ุงููุญุงุถุฑุฉ ุจุงููุนู")
    else:
        if add_user_progress("module8"):
            st.balloons()
            st.success("๐ ูุจุฑูู! ููุฏ ุฃูููุช ุงููุญุงุถุฑุฉ ุงูุซุงููุฉ ูุญุตูุช ุนูู 20 ููุทุฉ")
    
    # ุงููุธุฑูุฉ
    with st.expander("๐ ุงูุดุฑุญ ุงููุธุฑู", expanded=True):
        st.markdown("""
        ## ุงูุชุญูููุงุช ุงูููุฏุณูุฉ (Geometric Transformations)

        ### ูุง ูู ุงูุชุญูููุงุช ุงูููุฏุณูุฉุ
        ูู ุนูููุงุช ุชุบูุฑ ุงูููุฏุณุฉ ุงูููุงููุฉ ููุตูุฑุฉ (ุงูููุงุถุน ุงููุณุจูุฉ ููุจูุณูุงุช) ูุน ุงูุญูุงุธ ุนูู ูุญุชูู ุงูุตูุฑุฉ.

        ### ุฃููุงุน ุงูุชุญูููุงุช ุงูุฃุณุงุณูุฉ:

        #### 1. ุงูุฅุฒุงุญุฉ (Translation)
        - **ุงููุจุฏุฃ**: ุชุญุฑูู ุงูุตูุฑุฉ ูู ุงุชุฌุงู ูุนูู
        - **ุงููุนุงุฏูุฉ**: 
          ```
          x' = x + t_x
          y' = y + t_y
          ```
        - **ุงูุงุณุชุฎุฏุงู**: ูุญุงุฐุงุฉ ุงูุตูุฑุ ุชุตุญูุญ ุงูููุงุถุน

        #### 2. ุงูุฏูุฑุงู (Rotation)
        - **ุงููุจุฏุฃ**: ุชุฏููุฑ ุงูุตูุฑุฉ ุญูู ููุทุฉ ูุฑูุฒูุฉ
        - **ุงููุนุงุฏูุฉ**:
          ```
          x' = xโcosฮธ - yโsinฮธ
          y' = xโsinฮธ + yโcosฮธ
          ```
        - **ุงูุงุณุชุฎุฏุงู**: ุชุตุญูุญ ุงูุงุชุฌุงูุ ุฒูุงุฏุฉ ุงูุจูุงูุงุช

        #### 3. ุงูููุงุณ (Scaling)
        - **ุงููุจุฏุฃ**: ุชูุจูุฑ ุฃู ุชุตุบูุฑ ุงูุตูุฑุฉ
        - **ุงููุนุงุฏูุฉ**:
          ```
          x' = s_x โ x
          y' = s_y โ y
          ```
        - **ุงูุงุณุชุฎุฏุงู**: ุชุบููุฑ ุงูุญุฌูุ ุชุญุณูู ุงูุฏูุฉ

        #### 4. ุงููุต (Shearing)
        - **ุงููุจุฏุฃ**: ุฅุฒุงุญุฉ ุบูุฑ ููุชุธูุฉ ุชุญูู ุงููุณุชุทูู ุฅูู ูุชูุงุฒู ุฃุถูุงุน
        - **ุงูุงุณุชุฎุฏุงู**: ุชุตุญูุญ ุงูุชุดููุงุชุ ุชุฃุซูุฑุงุช ุจุตุฑูุฉ

        ### ุงูุชุญูููุงุช ุงููุชูุฏูุฉ:

        #### 1. ุงูุชุญููู ุงูุฃูููู (Affine Transform)
        - **ุงููุจุฏุฃ**: ูุญุงูุธ ุนูู ุงูุฎุทูุท ุงููุชูุงุฒูุฉ (translation + rotation + scaling + shearing)
        - **ุงูุฏุฑุฌุงุช ุงูุญุฑูุฉ**: 6
        - **ุงููุนุงุฏูุฉ**: ุชุญุชุงุฌ 3 points for mapping

        #### 2. ุงูุชุญููู ุงูุฅุณูุงุทู (Projective Transform/Homography)
        - **ุงููุจุฏุฃ**: ูุญุงูุธ ุนูู ุงูุฎุทูุท ุงููุณุชูููุฉ (ูุง ูุญุงูุธ ุนูู ุงูุชูุงุฒู)
        - **ุงูุฏุฑุฌุงุช ุงูุญุฑูุฉ**: 8
        - **ุงููุนุงุฏูุฉ**: ุชุญุชุงุฌ 4 points for mapping
        - **ุงูุงุณุชุฎุฏุงู**: ุชุตุญูุญ perspectiveุ panoramas

        ### ุทุฑู Interpolation ุงููุงูุฉ:

        #### 1. Nearest Neighbor
        - **ุงููุจุฏุฃ**: ุฃุฎุฐ ูููุฉ ุฃูุฑุจ ุจูุณู
        - **ุงููููุฒุงุช**: ุณุฑูุน
        - **ุงูุนููุจ**: pixelated results

        #### 2. Bilinear Interpolation
        - **ุงููุจุฏุฃ**: ูุชูุณุท ูุฑ weighted ููุชูุณุท 4 ุจูุณูุงุช ูุฌุงูุฑุฉ
        - **ุงููููุฒุงุช**: smoother ูู Nearest Neighbor
        - **ุงูุนููุจ**: ุฃูุซุฑ ุจุทุฆุงู

        #### 3. Bicubic Interpolation
        - **ุงููุจุฏุฃ**: ุงุณุชุฎุฏุงู 16 ุจูุณู ูุฌุงูุฑ
        - **ุงููููุฒุงุช**: ุฃุนูู ุฌูุฏุฉ
        - **ุงูุนููุจ**: ุงูุฃุจุทุฃ

        ### ุชุทุจููุงุช ุนูููุฉ:
        - ุชุตุญูุญ ุชุดููุงุช ุงููุงููุฑุง
        - ุชุฑููุจ ุงูุตูุฑ (Image registration)
        - ุงููุงูุน ุงููุนุฒุฒ
        - ูุนุงูุฌุฉ ุงูุตูุฑ ุงูุทุจูุฉ
        """)
    
    st.markdown("---")
    
    # ุงูุชุทุจูู ุงูุนููู
    st.subheader("๐ง ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ: ุงูุชุญูููุงุช ุงูููุฏุณูุฉ")
    
    # ุชุญููู ุงูุตูุฑุฉ
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ๐ค ุชุญููู ุงูุตูุฑุฉ")
        uploaded_file = st.file_uploader("ุงุฎุชุฑ ุตูุฑุฉ", type=['jpg', 'jpeg', 'png'], key="geo_upload")
        
        if uploaded_file is not None:
            image = load_image(uploaded_file)
            st.image(image, caption="ุงูุตูุฑุฉ ุงูุฃุตููุฉ", use_container_width=True)
        else:
            # ุฅูุดุงุก ุตูุฑุฉ ุงูุชุฑุงุถูุฉ
            image = create_geometric_sample()
            st.image(image, caption="ุงูุตูุฑุฉ ุงูุงูุชุฑุงุถูุฉ", use_container_width=True)
    
    with col2:
        if image is not None:
            st.markdown("#### โ๏ธ ุงุฎุชุฑ ููุน ุงูุชุญููู")
            
            transform_type = st.selectbox(
                "ููุน ุงูุชุญููู:",
                ["ุงูุฅุฒุงุญุฉ", "ุงูุฏูุฑุงู", "ุงูููุงุณ", "ุงูุงูุนูุงุณ", "ุงููุต", "Affine", "Homography", "ุฌููุน ุงูุชุญูููุงุช"]
            )
            
            # ุฅุนุฏุงุฏ ุงููุนุงููุงุช ุญุณุจ ููุน ุงูุชุญููู
            if transform_type == "ุงูุฅุฒุงุญุฉ":
                tx = st.slider("ุงูุฅุฒุงุญุฉ ุงูุฃูููุฉ", -100, 100, 0)
                ty = st.slider("ุงูุฅุฒุงุญุฉ ุงูุฑุฃุณูุฉ", -100, 100, 0)
            
            elif transform_type == "ุงูุฏูุฑุงู":
                angle = st.slider("ุฒุงููุฉ ุงูุฏูุฑุงู", -180, 180, 0)
                center_x = st.slider("ูุฑูุฒ ุงูุฏูุฑุงู X", 0, image.shape[1], image.shape[1]//2)
                center_y = st.slider("ูุฑูุฒ ุงูุฏูุฑุงู Y", 0, image.shape[0], image.shape[0]//2)
            
            elif transform_type == "ุงูููุงุณ":
                scale_x = st.slider("ูููุงุณ ุงูุนุฑุถ", 0.1, 3.0, 1.0, 0.1)
                scale_y = st.slider("ูููุงุณ ุงูุงุฑุชูุงุน", 0.1, 3.0, 1.0, 0.1)
                keep_aspect = st.checkbox("ุงูุญูุงุธ ุนูู ูุณุจุฉ ุงูุฃุจุนุงุฏ", value=True)
            
            elif transform_type == "ุงูุงูุนูุงุณ":
                flip_code = st.radio("ุงุชุฌุงู ุงูุงูุนูุงุณ:", ["ุงููู", "ุฑุฃุณู", "ููุงููุง"])
            
            elif transform_type == "ุงููุต":
                shear_x = st.slider("ูุต ุฃููู", -1.0, 1.0, 0.0, 0.1)
                shear_y = st.slider("ูุต ุฑุฃุณู", -1.0, 1.0, 0.0, 0.1)
            
            elif transform_type in ["Affine", "Homography"]:
                st.info("ุญุฏุฏ ููุงุท ุงูุชุญููู ุจุงุณุชุฎุฏุงู ุงููุคุดุฑ")
                points = []
            
            # ุงุฎุชูุงุฑ ุทุฑููุฉ Interpolation
            interp_method = st.selectbox("ุทุฑููุฉ ุงูุงุณุชููุงุก:", ["Nearest Neighbor", "Bilinear", "Bicubic"])
            
            if st.button("๐ ุชุทุจูู ุงูุชุญููู"):
                with st.spinner("ุฌุงุฑู ุงููุนุงูุฌุฉ..."):
                    result = apply_geometric_transform(image, transform_type, locals())
                    
                    if transform_type != "ุฌููุน ุงูุชุญูููุงุช":
                        st.image(result, caption=f"ุจุนุฏ {transform_type}", use_container_width=True)
                    else:
                        # ุนุฑุถ ุฌููุน ุงูุชุญูููุงุช
                        show_all_geometric_transforms(image)
    
    st.markdown("---")
    
    # ูุณู ุฅุถุงูู: ุชุฃุซูุฑ ุทุฑู ุงูุงุณุชููุงุก
    if image is not None:
        st.subheader("๐ ููุงุฑูุฉ ุทุฑู ุงูุงุณุชููุงุก (Interpolation)")
        
        # ุชุทุจูู ููุณ ุงูุชุญููู ุจุทุฑู ุงุณุชููุงุก ูุฎุชููุฉ
        methods = {
            "Nearest Neighbor": cv2.INTER_NEAREST,
            "Bilinear": cv2.INTER_LINEAR,
            "Bicubic": cv2.INTER_CUBIC
        }
        
        cols = st.columns(3)
        for (name, method), col in zip(methods.items(), cols):
            with col:
                # ุชุทุจูู ุชุญููู ููุงุณู
                rows, cols = image.shape[:2]
                M = np.float32([[1, 0.2, 0], [0.2, 1, 0]])
                transformed = cv2.warpAffine(image, M, (cols, cols), flags=method)
                st.image(transformed, caption=name, use_container_width=True)
                
                # ุญุณุงุจ ุฌูุฏุฉ ุงูุงุณุชููุงุก
                if len(image.shape) == 2:
                    sharpness = calculate_sharpness(transformed)
                    st.metric("ุญุฏุฉ ุงูุตูุฑุฉ", f"{sharpness:.2f}")
    
    # ุงุฎุชุจุงุฑ ูุตูุฑ
    st.markdown("---")
    with st.expander("๐งช ุงุฎุชุจุงุฑ ูุตูุฑ", expanded=False):
        st.subheader("ุงุฎุชุจุงุฑ ููู ุงูุชุญูููุงุช ุงูููุฏุณูุฉ")
        
        q1 = st.radio(
            "1. ูู ููุทุฉ ูุญุชุงุฌูุง ุงูุชุญููู ุงูุฃูููู?",
            ["ููุทุชูู", "ุซูุงุซ ููุงุท", "ุฃุฑุจุน ููุงุท", "ุฎูุณ ููุงุท"],
            key="geo_q1"
        )
        
        q2 = st.radio(
            "2. ุฃู ุทุฑููุฉ ุงุณุชููุงุก ุชุนุทู ุฃูุถู ุฌูุฏุฉ?",
            ["Nearest Neighbor", "Bilinear", "Bicubic", "ูููู ููุณ ุงูุฌูุฏุฉ"],
            key="geo_q2"
        )
        
        q3 = st.radio(
            "3. ูุง ูู ุงูุชุญููู ุงูุฐู ูุญุงูุธ ุนูู ุงูุฎุทูุท ุงููุชูุงุฒูุฉ?",
            ["ุงูุฅุฒุงุญุฉ ููุท", "ุงูุฏูุฑุงู ููุท", "ุงูุชุญููู ุงูุฃูููู", "ุงูุชุญููู ุงูุฅุณูุงุทู"],
            key="geo_q3"
        )
        
        if st.button("โ ุงูุชุญูู ูู ุงูุฅุฌุงุจุงุช", key="geo_check"):
            score = 0
            if q1 == "ุซูุงุซ ููุงุท":
                score += 1
                st.success("ุงูุณุคุงู 1: ุตุญูุญ! ุงูุฃูููู ูุญุชุงุฌ 3 ููุงุท")
            else:
                st.error("ุงูุณุคุงู 1: ุฎุทุฃ! ุงูุฃูููู ูุญุชุงุฌ 3 ููุงุท")
            
            if q2 == "Bicubic":
                score += 1
                st.success("ุงูุณุคุงู 2: ุตุญูุญ! Bicubic ูุนุทู ุฃูุถู ุฌูุฏุฉ")
            else:
                st.error("ุงูุณุคุงู 2: ุฎุทุฃ! Bicubic ูู ุงูุฃุนูู ุฌูุฏุฉ")
            
            if q3 == "ุงูุชุญููู ุงูุฃูููู":
                score += 1
                st.success("ุงูุณุคุงู 3: ุตุญูุญ! ุงูุฃูููู ูุญุงูุธ ุนูู ุงูุชูุงุฒู")
            else:
                st.error("ุงูุณุคุงู 3: ุฎุทุฃ! ุงูุฃูููู ูุญุงูุธ ุนูู ุงูุฎุทูุท ุงููุชูุงุฒูุฉ")
            
            st.info(f"**ุงููุชูุฌุฉ: {score}/3**")
            
            if score == 3:
                st.balloons()
                st.session_state.quiz_score = st.session_state.get('quiz_score', 0) + 3

def create_geometric_sample():
    """ุฅูุดุงุก ุตูุฑุฉ ููุงุณุจุฉ ููุชุญูููุงุช ุงูููุฏุณูุฉ"""
    image = np.zeros((300, 400, 3), dtype=np.uint8)
    
    # ุฅุถุงูุฉ ุดุจูุฉ ูู ุงูุฎุทูุท
    for i in range(0, 400, 20):
        cv2.line(image, (i, 0), (i, 300), (255, 255, 255), 1)
    for i in range(0, 300, 20):
        cv2.line(image, (0, i), (400, i), (255, 255, 255), 1)
    
    # ุฅุถุงูุฉ ุฃุดูุงู ููููุฉ
    cv2.rectangle(image, (50, 50), (150, 150), (0, 0, 255), -1)  # ุฃุญูุฑ
    cv2.circle(image, (300, 100), 50, (0, 255, 0), -1)  # ุฃุฎุถุฑ
    cv2.rectangle(image, (180, 200), (280, 280), (255, 0, 0), -1)  # ุฃุฒุฑู
    
    # ุฅุถุงูุฉ ูุต
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(image, 'Geometry', (150, 250), font, 1, (255, 255, 255), 2, cv2.LINE_AA)
    
    return image

def apply_geometric_transform(image, transform_type, params):
    """ุชุทุจูู ุงูุชุญููู ุงูููุฏุณู ุงููุญุฏุฏ"""
    h, w = image.shape[:2]
    
    if transform_type == "ุงูุฅุฒุงุญุฉ":
        M = np.float32([[1, 0, params['tx']], [0, 1, params['ty']]])
        return cv2.warpAffine(image, M, (w, h))
    
    elif transform_type == "ุงูุฏูุฑุงู":
        center = (params['center_x'], params['center_y'])
        M = cv2.getRotationMatrix2D(center, params['angle'], 1)
        return cv2.warpAffine(image, M, (w, h))
    
    elif transform_type == "ุงูููุงุณ":
        if params['keep_aspect']:
            scale = min(params['scale_x'], params['scale_y'])
            new_w, new_h = int(w * scale), int(h * scale)
        else:
            new_w, new_h = int(w * params['scale_x']), int(h * params['scale_y'])
        return cv2.resize(image, (new_w, new_h), interpolation=cv2.INTER_CUBIC)
    
    elif transform_type == "ุงูุงูุนูุงุณ":
        code = 1 if params['flip_code'] == "ุงููู" else 0
        if params['flip_code'] == "ููุงููุง":
            code = -1
        return cv2.flip(image, code)
    
    elif transform_type == "ุงููุต":
        M = np.float32([[1, params['shear_x'], 0], [params['shear_y'], 1, 0]])
        return cv2.warpAffine(image, M, (w, h))
    
    elif transform_type == "Affine":
        # ููุงุท ุงูุชุฑุงุถูุฉ ููุชุญููู ุงูุฃูููู
        pts1 = np.float32([[50, 50], [200, 50], [50, 200]])
        pts2 = np.float32([[10, 100], [200, 50], [100, 250]])
        M = cv2.getAffineTransform(pts1, pts2)
        return cv2.warpAffine(image, M, (w, h))
    
    elif transform_type == "Homography":
        # ููุงุท ุงูุชุฑุงุถูุฉ ููุชุญููู ุงูุฅุณูุงุทู
        pts1 = np.float32([[56, 65], [368, 52], [28, 387], [389, 390]])
        pts2 = np.float32([[0, 0], [300, 0], [0, 300], [300, 300]])
        M = cv2.getPerspectiveTransform(pts1, pts2)
        return cv2.warpPerspective(image, M, (300, 300))
    
    return image

def show_all_geometric_transforms(image):
    """ุนุฑุถ ุฌููุน ุงูุชุญูููุงุช ุงูููุฏุณูุฉ"""
    st.markdown("##### ๐ ููุงุฑูุฉ ุจูู ุงูุชุญูููุงุช ุงูููุฏุณูุฉ ุงูุฃุณุงุณูุฉ")
    
    transforms = {
        "ุงูุฃุตู": image,
        "ุงูุฅุฒุงุญุฉ": apply_geometric_transform(image, "ุงูุฅุฒุงุญุฉ", {'tx': 30, 'ty': -20}),
        "ุงูุฏูุฑุงู": apply_geometric_transform(image, "ุงูุฏูุฑุงู", {'angle': 45, 'center_x': 200, 'center_y': 150}),
        "ุงูููุงุณ": cv2.resize(image, None, fx=0.7, fy=0.7, interpolation=cv2.INTER_CUBIC),
        "ุงูุนูุงุณ ุฃููู": cv2.flip(image, 1),
        "ุงูุนูุงุณ ุฑุฃุณู": cv2.flip(image, 0)
    }
    
    cols = st.columns(3)
    col_idx = 0
    
    for name, result in transforms.items():
        with cols[col_idx]:
            st.image(result, caption=name, use_container_width=True)
        
        col_idx = (col_idx + 1) % 3
        if col_idx == 0 and name != "ุงูุนูุงุณ ุฑุฃุณู":
            st.markdown("---")

def calculate_sharpness(image):
    """ุญุณุงุจ ุญุฏุฉ ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู Laplacian variance"""
    if len(image.shape) == 3:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return cv2.Laplacian(image, cv2.CV_64F).var()